{"version":3,"sources":["cache-block/Cache-Block-FIFO.js","cache-block/Cache-Block-LFU.js","cache-block/Cache-Block-LRU.js","cache-block/Cache-Block-RNG.js","App.js","serviceWorker.js","index.js"],"names":["CacheBlockFIFO","props","state","hit","capacityMiss","compulsoryMiss","currentNumber","nextProps","simulating","this","FIFO","numbers","numberOfLines","numbersAccessed","numbersCached","currentLine","i","delay","setState","find","n","addToTable","getNextLine","push","length","line","value","element","document","getElementById","innerHTML","rows","key","id","React","Component","CacheBlockLFU","LFU","frequencyOfAccess","min","Math","indexOf","setupFrequencyOfAcess","position","getLeastFrequentlyUsedIndex","CacheBlockLRU","LRU","max","map","f","getIncrementedFrequency","getLeastRecentlyUsedIndex","CacheBlockRNG","linesUsed","console","debug","floor","random","App","handleSimulationChange","handleNumbersChange","handleNumberOfLinesChange","e","target","file","files","reader","FileReader","addEventListener","result","split","readAsText","className","type","defaultValue","onChange","getNumbers","onClick","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAwFeA,EApFf,YACI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,IAAK,EACLC,aAAc,EACdC,eAAgB,EAChBC,cAAe,MANJ,EADvB,gIAUoCC,GAVpC,qEAWYA,EAAUC,WAXtB,gCAYkBC,KAAKC,KAAKH,EAAUI,QAASJ,EAAUK,eAZzD,2KAgBeD,EAASC,GAhBxB,sFAiBcC,EAAkB,GAClBC,EAAgB,GAClBC,EAAc,EAnB1B,uBAoBiBC,GApBjB,8EAqBkBV,EAAgBK,EAAQK,GArB1C,SAsBkBC,iBAAM,cAAW,EAAKhB,MAAMgB,OAtB9C,uBAuBkB,EAAKC,SAAS,CAAEZ,cAAeA,IAvBjD,UAwBwE,qBAAjDQ,EAAcK,MAAK,SAAAC,GAAC,OAAIA,IAAMd,KAxBrD,gCAyBsB,EAAKY,SAAS,CAAEf,IAAK,EAAKD,MAAMC,IAAM,IAzB5D,sDA4B0E,qBAAnDU,EAAgBM,MAAK,SAAAC,GAAC,OAAIA,IAAMd,KA5BvD,kCA6BsB,EAAKY,SAAS,CAAEd,aAAc,EAAKF,MAAME,aAAe,IA7B9E,eA8BgBU,EAAcC,GAAeT,EAC7B,EAAKe,WAAWN,EAAaT,GAC7BS,EAAc,EAAKO,YAAYP,EAAaH,GAhC5D,uDAmCkB,EAAKM,SAAS,CAAEb,eAAgB,EAAKH,MAAMG,eAAiB,IAnC9E,QAoCYS,EAAcC,GAAeT,EAC7B,EAAKe,WAAWN,EAAaT,GAC7BS,EAAc,EAAKO,YAAYP,EAAaH,GAC5CC,EAAgBU,KAAKjB,GAvCjC,2CAoBiBU,EAAI,EApBrB,YAoBwBA,EAAIL,EAAQa,QApBpC,0CAoBiBR,GApBjB,4FAoB4CA,IApB5C,sJA2CgBD,EAAaH,GACrB,OAAIG,EAAc,IAAMH,EACb,EAEJG,EAAc,IA/C7B,iCAkDeU,EAAMC,GACb,IAAMC,EAAUC,SAASC,eAAT,eAAgCJ,IACtB,MAAtBE,EAAQG,UAIZH,EAAQG,WAAR,YAA0BJ,GAHtBC,EAAQG,UAAYJ,IArDhC,+BA8DQ,IADA,IAAIK,EAAO,GACFf,EAAI,EAAGA,EAAIP,KAAKR,MAAMW,cAAeI,IAC1Ce,EAAKR,KAAK,wBAAIS,IAAKhB,GAAG,wBAAIiB,GAAE,eAAUjB,IAAhB,OAG1B,OACI,6BACI,sCAECP,KAAKP,MAAMI,cACZ,+BACI,+BACKyB,IAGT,sCAAYtB,KAAKP,MAAMC,KACvB,gDAAsBM,KAAKP,MAAME,cACjC,kDAAwBK,KAAKP,MAAMG,qBA9EnD,GAAoC6B,IAAMC,W,QCqG3BC,EArGf,YACI,WAAYnC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,IAAK,EACLC,aAAc,EACdC,eAAgB,EAChBC,cAAe,MANJ,EADvB,gIAUoCC,GAVpC,qEAWYA,EAAUC,WAXtB,gCAYkBC,KAAK4B,IAAI9B,EAAUI,QAASJ,EAAUK,eAZxD,mJAgB0BA,GAElB,IADA,IAAM0B,EAAoB,GACjBtB,EAAI,EAAGA,EAAIJ,EAAeI,IAC/BsB,EAAkBf,KAAK,GAE3B,OAAOe,IArBf,kDAwBgCA,GACxB,IAAMC,EAAMC,KAAKD,IAAL,MAAAC,KAAI,YAAQF,IACxB,OAAOA,EAAkBG,QAAQF,KA1BzC,mEA6Bc5B,EAASC,GA7BvB,sFA8BcC,EAAkB,GAClBC,EAAgB,GAChBwB,EAAoB7B,KAAKiC,sBAAsB9B,GAhC7D,uBAiCiBI,GAjCjB,sFAkCkBV,EAAgBK,EAAQK,GAlC1C,SAmCkBC,iBAAM,cAAW,EAAKhB,MAAMgB,OAnC9C,uBAoCkB,EAAKC,SAAS,CAAEZ,cAAeA,IApCjD,UAqCwE,qBAAjDQ,EAAcK,MAAK,SAAAC,GAAC,OAAIA,IAAMd,KArCrD,iCAsCsB,EAAKY,SAAS,CAAEf,IAAK,EAAKD,MAAMC,IAAM,IAtC5D,cAuCsBwC,EAAW7B,EAAc2B,QAAQnC,GACvCgC,EAAkBK,IAAa,EAxC/C,yCA2C0E,qBAAnD9B,EAAgBM,MAAK,SAAAC,GAAC,OAAIA,IAAMd,KA3CvD,kCA4CsB,EAAKY,SAAS,CAAEd,aAAc,EAAKF,MAAME,aAAe,IA5C9E,eA6CsBuC,EAAW,EAAKC,4BAA4BN,GAClDxB,EAAc6B,GAAYrC,EAC1BgC,EAAkBK,GAAY,EAC9B,EAAKtB,WAAWsB,EAAUrC,GAhD1C,uDAmDkB,EAAKY,SAAS,CAAEb,eAAgB,EAAKH,MAAMG,eAAiB,IAnD9E,WAoDgBS,EAAcU,SAAWZ,EApDzC,wBAqDsB+B,EAAW,EAAKC,4BAA4BN,GAClDxB,EAAc6B,GAAYrC,EAC1BgC,EAAkBK,GAAY,EAC9B,EAAKtB,WAAWsB,EAAUrC,GAC1BO,EAAgBU,KAAKjB,GAzDrC,sCA4DkBqC,EAAW7B,EAAcU,OAC/BV,EAAc6B,GAAYrC,EAC1BgC,EAAkBK,GAAY,EAC9B,EAAKtB,WAAWsB,EAAUrC,GAC1BO,EAAgBU,KAAKjB,GAhEjC,2CAiCiBU,EAAI,EAjCrB,YAiCwBA,EAAIL,EAAQa,QAjCpC,0CAiCiBR,GAjCjB,4FAiC4CA,IAjC5C,0JAoEeS,EAAMC,GACb,IAAMC,EAAUC,SAASC,eAAT,cAA+BJ,IACrB,MAAtBE,EAAQG,UAIZH,EAAQG,WAAR,YAA0BJ,GAHtBC,EAAQG,UAAYJ,IAvEhC,+BAgFQ,IADA,IAAIK,EAAO,GACFf,EAAI,EAAGA,EAAIP,KAAKR,MAAMW,cAAeI,IAC1Ce,EAAKR,KAAK,wBAAIS,IAAKhB,GAAG,wBAAIiB,GAAE,cAASjB,IAAf,OAG1B,OACI,6BACI,qCACCP,KAAKP,MAAMI,cACZ,+BACI,+BACKyB,IAGT,sCAAYtB,KAAKP,MAAMC,KACvB,gDAAsBM,KAAKP,MAAME,cACjC,kDAAwBK,KAAKP,MAAMG,qBA/FnD,GAAmC6B,IAAMC,WC6G1BU,EA7Gf,YACI,WAAY5C,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,IAAK,EACLC,aAAc,EACdC,eAAgB,EAChBC,cAAe,MANJ,EADvB,gIAUoCC,GAVpC,qEAWYA,EAAUC,WAXtB,gCAYkBC,KAAKqC,IAAIvC,EAAUI,QAASJ,EAAUK,eAZxD,mJAgB0BA,GAElB,IADA,IAAM0B,EAAoB,GACjBtB,EAAI,EAAGA,EAAIJ,EAAeI,IAC/BsB,EAAkBf,KAAK,GAE3B,OAAOe,IArBf,gDAwB8BA,GACtB,IAAMS,EAAMP,KAAKO,IAAL,MAAAP,KAAI,YAAQF,IACxB,OAAOA,EAAkBG,QAAQM,KA1BzC,8CA6B4BT,GACpB,OAAOA,EAAkBU,KAAI,SAAAC,GAAC,QAAMA,OA9B5C,mEAiCctC,EAASC,GAjCvB,sFAkCcC,EAAkB,GAClBC,EAAgB,GAClBwB,EAAoB,GApChC,uBAqCiBtB,GArCjB,sFAsCkBV,EAAgBK,EAAQK,GAtC1C,SAuCkBC,iBAAM,cAAW,EAAKhB,MAAMgB,OAvC9C,uBAwCkB,EAAKC,SAAS,CAAEZ,cAAeA,IAxCjD,UAyCwE,qBAAjDQ,EAAcK,MAAK,SAAAC,GAAC,OAAIA,IAAMd,KAzCrD,iCA0CsB,EAAKY,SAAS,CAAEf,IAAK,EAAKD,MAAMC,IAAM,IA1C5D,cA2CsBwC,EAAW7B,EAAc2B,QAAQnC,IACvCgC,EAAoB,EAAKY,wBAAwBZ,IAC/BK,GAAY,EA7C9C,yCAgD0E,qBAAnD9B,EAAgBM,MAAK,SAAAC,GAAC,OAAIA,IAAMd,KAhDvD,kCAiDsB,EAAKY,SAAS,CAAEd,aAAc,EAAKF,MAAME,aAAe,IAjD9E,eAkDsBuC,EAAW,EAAKQ,0BAA0Bb,GAChDxB,EAAc6B,GAAYrC,GAC1BgC,EAAoB,EAAKY,wBAAwBZ,IAC/BK,GAAY,EAC9B,EAAKtB,WAAWsB,EAAUrC,GAtD1C,uDAyDkB,EAAKY,SAAS,CAAEb,eAAgB,EAAKH,MAAMG,eAAiB,IAzD9E,WA0DgBS,EAAcU,SAAWZ,EA1DzC,wBA2DsB+B,EAAW,EAAKQ,0BAA0Bb,GAChDxB,EAAc6B,GAAYrC,GAC1BgC,EAAoB,EAAKY,wBAAwBZ,IAC/BK,GAAY,EAC9B,EAAKtB,WAAWsB,EAAUrC,GAC1BO,EAAgBU,KAAKjB,GAhErC,sCAmEkBqC,EAAW7B,EAAcU,OAC/BV,EAAc6B,GAAYrC,GAC1BgC,EAAoB,EAAKY,wBAAwBZ,IAC/BK,GAAY,EAC9B,EAAKtB,WAAWsB,EAAUrC,GAC1BO,EAAgBU,KAAKjB,GAxEjC,2CAqCiBU,EAAI,EArCrB,YAqCwBA,EAAIL,EAAQa,QArCpC,0CAqCiBR,GArCjB,4FAqC4CA,IArC5C,qJA4EeS,EAAMC,GACb,IAAMC,EAAUC,SAASC,eAAT,cAA+BJ,IACrB,MAAtBE,EAAQG,UAIZH,EAAQG,WAAR,YAA0BJ,GAHtBC,EAAQG,UAAYJ,IA/EhC,+BAwFQ,IADA,IAAIK,EAAO,GACFf,EAAI,EAAGA,EAAIP,KAAKR,MAAMW,cAAeI,IAC1Ce,EAAKR,KAAK,wBAAIS,IAAKhB,GAAG,wBAAIiB,GAAE,cAASjB,IAAf,OAG1B,OACI,6BACI,qCACCP,KAAKP,MAAMI,cACZ,+BACI,+BACKyB,IAGT,sCAAYtB,KAAKP,MAAMC,KACvB,gDAAsBM,KAAKP,MAAME,cACjC,kDAAwBK,KAAKP,MAAMG,qBAvGnD,GAAmC6B,IAAMC,WCqF1BiB,EArFf,YACI,WAAYnD,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,IAAK,EACLC,aAAc,EACdC,eAAgB,EAChBC,cAAe,MANJ,EADvB,gIAUoCC,GAVpC,qEAWYA,EAAUC,WAXtB,gCAYkBC,KAAKC,KAAKH,EAAUI,QAASJ,EAAUK,eAZzD,2KAgBeD,EAASC,GAhBxB,sFAiBcC,EAAkB,GAClBC,EAAgB,GAClBC,EAAc,EAnB1B,uBAoBiBC,GApBjB,8EAqBkBV,EAAgBK,EAAQK,GArB1C,SAsBkBC,iBAAM,cAAW,EAAKhB,MAAMgB,OAtB9C,uBAuBkB,EAAKC,SAAS,CAAEZ,cAAeA,IAvBjD,UAwBwE,qBAAjDQ,EAAcK,MAAK,SAAAC,GAAC,OAAIA,IAAMd,KAxBrD,gCAyBsB,EAAKY,SAAS,CAAEf,IAAK,EAAKD,MAAMC,IAAM,IAzB5D,sDA4B0E,qBAAnDU,EAAgBM,MAAK,SAAAC,GAAC,OAAIA,IAAMd,KA5BvD,kCA6BsB,EAAKY,SAAS,CAAEd,aAAc,EAAKF,MAAME,aAAe,IA7B9E,eA8BgBU,EAAcC,GAAeT,EAC7B,EAAKe,WAAWN,EAAaT,GAC7BS,EAAc,EAAKO,YAAYR,EAAcU,OAAQZ,GAhCrE,uDAmCkB,EAAKM,SAAS,CAAEb,eAAgB,EAAKH,MAAMG,eAAiB,IAnC9E,QAoCYS,EAAcC,GAAeT,EAC7B,EAAKe,WAAWN,EAAaT,GAC7BS,EAAc,EAAKO,YAAYR,EAAcU,OAAQZ,GACrDC,EAAgBU,KAAKjB,GAvCjC,2CAoBiBU,EAAI,EApBrB,YAoBwBA,EAAIL,EAAQa,QApBpC,0CAoBiBR,GApBjB,4FAoB4CA,IApB5C,sJA2CgBqC,EAAWzC,GAGnB,OAFA0C,QAAQC,MAAMF,GACdC,QAAQC,MAAM3C,GACPyC,EAAYzC,EACbyC,EACAb,KAAKgB,MAAMhB,KAAKiB,UAAY7C,EAAgB,MAhD1D,iCAmDea,EAAMC,GACb,IAAMC,EAAUC,SAASC,eAAT,cAA+BJ,IACrB,MAAtBE,EAAQG,UAIZH,EAAQG,WAAR,YAA0BJ,GAHtBC,EAAQG,UAAYJ,IAtDhC,+BA+DQ,IADA,IAAIK,EAAO,GACFf,EAAI,EAAGA,EAAIP,KAAKR,MAAMW,cAAeI,IAC1Ce,EAAKR,KAAK,wBAAIS,IAAKhB,GAAG,wBAAIiB,GAAE,cAASjB,IAAf,OAG1B,OACI,6BACI,qCAECP,KAAKP,MAAMI,cACZ,+BACI,+BACKyB,IAGT,sCAAYtB,KAAKP,MAAMC,KACvB,gDAAsBM,KAAKP,MAAME,cACjC,kDAAwBK,KAAKP,MAAMG,qBA/EnD,GAAmC6B,IAAMC,WCuD1BuB,G,MApDf,YACE,WAAYzD,GAAQ,IAAD,8BACjB,4CAAMA,KAgBR0D,uBAAyB,SAAAjC,GACnB,EAAKxB,MAAMU,eAAiB,EAAKV,MAAMS,QAAQa,QACjD,EAAKN,SAAS,CAAEV,WAAYkB,KAnBb,EAwBnBkC,oBAAsB,SAAAlC,GAAK,OAAI,EAAKR,SAAS,CAAEP,QAASe,KAxBrC,EA0BnBmC,0BAA4B,SAAAC,GAAC,OAAI,EAAK5C,SAAS,CAAEN,cAAekD,EAAEC,OAAOrC,SAxBvE,EAAKxB,MAAQ,CACXU,cAAe,EACfK,MAAO,IACPN,QAAS,GACTH,YAAY,GANG,EADrB,0EAWgB,IAAD,OACLwD,EAAOpC,SAASC,eAAe,cAAcoC,MAAM,GACnDC,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,QAAQ,kBAAM,EAAKR,oBAAoBM,EAAOG,OAAOC,MAAM,SACnFJ,EAAOK,WAAWP,KAftB,+BA6BY,IAAD,OACP,OACE,yBAAKQ,UAAU,OACb,kEACE,2BAAOvC,GAAG,cAAcwC,KAAK,SAASlC,IAAI,IAAImC,aAAa,IAAIC,SAAU,SAACb,GAAD,OAAO,EAAKD,0BAA0BC,OAEjH,sDACE,2BAAO7B,GAAG,aAAawC,KAAK,OAAOE,SAAU,kBAAM,EAAKC,iBAG1D,2BAAOH,KAAK,SAASI,QAAS,kBAAM,EAAKlB,wBAAuB,IAAOjC,MAAM,OAE7E,yBAAK8C,UAAU,mBACb,kBAAC,EAAD,CAAgBvD,MAAOR,KAAKP,MAAMe,MAAOL,cAAeH,KAAKP,MAAMU,cAAeD,QAASF,KAAKP,MAAMS,QAASH,WAAYC,KAAKP,MAAMM,aACtI,kBAAC,EAAD,CAAeS,MAAOR,KAAKP,MAAMe,MAAOL,cAAeH,KAAKP,MAAMU,cAAeD,QAASF,KAAKP,MAAMS,QAASH,WAAYC,KAAKP,MAAMM,aACrI,kBAAC,EAAD,CAAeS,MAAOR,KAAKP,MAAMe,MAAOL,cAAeH,KAAKP,MAAMU,cAAeD,QAASF,KAAKP,MAAMS,QAASH,WAAYC,KAAKP,MAAMM,aACrI,kBAAC,EAAD,CAAeS,MAAOR,KAAKP,MAAMe,MAAOL,cAAeH,KAAKP,MAAMU,cAAeD,QAASF,KAAKP,MAAMS,QAASH,WAAYC,KAAKP,MAAMM,mBA7C/I,GAAyB0B,IAAMC,YCKX2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxD,SAASC,eAAe,SD2H3C,kBAAmBwD,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b7e9da01.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Cache-Block.css';\r\nimport { delay } from 'q';\r\n\r\nexport class CacheBlockFIFO extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hit: 0,\r\n            capacityMiss: 0,\r\n            compulsoryMiss: 0,\r\n            currentNumber: null\r\n        }\r\n    }\r\n    async componentWillReceiveProps(nextProps) {\r\n        if (nextProps.simulating) {\r\n            await this.FIFO(nextProps.numbers, nextProps.numberOfLines);\r\n        }\r\n    }\r\n\r\n    async FIFO(numbers, numberOfLines) {\r\n        const numbersAccessed = [];\r\n        const numbersCached = [];\r\n        let currentLine = 0;\r\n        for (let i = 0; i < numbers.length; i++) {\r\n            const currentNumber = numbers[i];\r\n            await delay(() => { }, this.props.delay);\r\n            await this.setState({ currentNumber: currentNumber });\r\n            if (typeof numbersCached.find(n => n === currentNumber) !== 'undefined') {\r\n                await this.setState({ hit: this.state.hit + 1 });\r\n                continue;\r\n            }\r\n            if (typeof numbersAccessed.find(n => n === currentNumber) !== 'undefined') {\r\n                await this.setState({ capacityMiss: this.state.capacityMiss + 1 });\r\n                numbersCached[currentLine] = currentNumber;\r\n                this.addToTable(currentLine, currentNumber);\r\n                currentLine = this.getNextLine(currentLine, numberOfLines);\r\n                continue;\r\n            }\r\n            await this.setState({ compulsoryMiss: this.state.compulsoryMiss + 1 });\r\n            numbersCached[currentLine] = currentNumber;\r\n            this.addToTable(currentLine, currentNumber);\r\n            currentLine = this.getNextLine(currentLine, numberOfLines);\r\n            numbersAccessed.push(currentNumber);\r\n        }\r\n    }\r\n\r\n    getNextLine(currentLine, numberOfLines) {\r\n        if (currentLine + 1 === numberOfLines) {\r\n            return 0;\r\n        }\r\n        return currentLine + 1;\r\n    }\r\n\r\n    addToTable(line, value) {\r\n        const element = document.getElementById(`fifo-${line}`);\r\n        if (element.innerHTML === '-') {\r\n            element.innerHTML = value;\r\n            return;\r\n        }\r\n        element.innerHTML += `, ${value}`;\r\n    }\r\n\r\n\r\n    render() {\r\n        let rows = [];\r\n        for (let i = 0; i < this.props.numberOfLines; i++) {\r\n            rows.push(<tr key={i}><td id={`fifo-${i}`}>-</td></tr>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <span>FIFO</span>\r\n\r\n                {this.state.currentNumber}\r\n                <table>\r\n                    <tbody>\r\n                        {rows}\r\n                    </tbody>\r\n                </table>\r\n                <span>Hit: {this.state.hit}</span>\r\n                <span>Capacity Miss: {this.state.capacityMiss}</span>\r\n                <span>Compulsory Miss: {this.state.compulsoryMiss}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CacheBlockFIFO;\r\n","import React from 'react';\r\nimport './Cache-Block.css';\r\nimport { delay } from 'q';\r\n\r\nexport class CacheBlockLFU extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hit: 0,\r\n            capacityMiss: 0,\r\n            compulsoryMiss: 0,\r\n            currentNumber: null\r\n        }\r\n    }\r\n    async componentWillReceiveProps(nextProps) {\r\n        if (nextProps.simulating) {\r\n            await this.LFU(nextProps.numbers, nextProps.numberOfLines);\r\n        }\r\n    }\r\n\r\n    setupFrequencyOfAcess(numberOfLines) {\r\n        const frequencyOfAccess = [];\r\n        for (let i = 0; i < numberOfLines; i++) {\r\n            frequencyOfAccess.push(0);\r\n        }\r\n        return frequencyOfAccess;\r\n    }\r\n\r\n    getLeastFrequentlyUsedIndex(frequencyOfAccess) {\r\n        const min = Math.min(...frequencyOfAccess);\r\n        return frequencyOfAccess.indexOf(min);\r\n    }\r\n\r\n    async LFU(numbers, numberOfLines) {\r\n        const numbersAccessed = [];\r\n        const numbersCached = [];\r\n        const frequencyOfAccess = this.setupFrequencyOfAcess(numberOfLines);\r\n        for (let i = 0; i < numbers.length; i++) {\r\n            const currentNumber = numbers[i];\r\n            await delay(() => { }, this.props.delay);\r\n            await this.setState({ currentNumber: currentNumber });\r\n            if (typeof numbersCached.find(n => n === currentNumber) !== 'undefined') {\r\n                await this.setState({ hit: this.state.hit + 1 });\r\n                const position = numbersCached.indexOf(currentNumber);\r\n                frequencyOfAccess[position] += 1;\r\n                continue;\r\n            }\r\n            if (typeof numbersAccessed.find(n => n === currentNumber) !== 'undefined') {\r\n                await this.setState({ capacityMiss: this.state.capacityMiss + 1 });\r\n                const position = this.getLeastFrequentlyUsedIndex(frequencyOfAccess);\r\n                numbersCached[position] = currentNumber;\r\n                frequencyOfAccess[position] = 0;\r\n                this.addToTable(position, currentNumber);\r\n                continue;\r\n            }\r\n            await this.setState({ compulsoryMiss: this.state.compulsoryMiss + 1 });\r\n            if (numbersCached.length === numberOfLines) {\r\n                const position = this.getLeastFrequentlyUsedIndex(frequencyOfAccess);\r\n                numbersCached[position] = currentNumber;\r\n                frequencyOfAccess[position] = 0;\r\n                this.addToTable(position, currentNumber);\r\n                numbersAccessed.push(currentNumber);\r\n                continue;\r\n            }\r\n            const position = numbersCached.length;\r\n            numbersCached[position] = currentNumber;\r\n            frequencyOfAccess[position] = 0;\r\n            this.addToTable(position, currentNumber);\r\n            numbersAccessed.push(currentNumber);\r\n        }\r\n    }\r\n\r\n    addToTable(line, value) {\r\n        const element = document.getElementById(`lfu-${line}`);\r\n        if (element.innerHTML === '-') {\r\n            element.innerHTML = value;\r\n            return;\r\n        }\r\n        element.innerHTML += `, ${value}`;\r\n    }\r\n\r\n\r\n    render() {\r\n        let rows = [];\r\n        for (let i = 0; i < this.props.numberOfLines; i++) {\r\n            rows.push(<tr key={i}><td id={`lfu-${i}`}>-</td></tr>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <span>LFU</span>\r\n                {this.state.currentNumber}\r\n                <table>\r\n                    <tbody>\r\n                        {rows}\r\n                    </tbody>\r\n                </table>\r\n                <span>Hit: {this.state.hit}</span>\r\n                <span>Capacity Miss: {this.state.capacityMiss}</span>\r\n                <span>Compulsory Miss: {this.state.compulsoryMiss}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CacheBlockLFU;\r\n","import React from 'react';\r\nimport './Cache-Block.css';\r\nimport { delay } from 'q';\r\n\r\nexport class CacheBlockLRU extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hit: 0,\r\n            capacityMiss: 0,\r\n            compulsoryMiss: 0,\r\n            currentNumber: null\r\n        }\r\n    }\r\n    async componentWillReceiveProps(nextProps) {\r\n        if (nextProps.simulating) {\r\n            await this.LRU(nextProps.numbers, nextProps.numberOfLines);\r\n        }\r\n    }\r\n\r\n    setupFrequencyOfAcess(numberOfLines) {\r\n        const frequencyOfAccess = [];\r\n        for (let i = 0; i < numberOfLines; i++) {\r\n            frequencyOfAccess.push(0);\r\n        }\r\n        return frequencyOfAccess;\r\n    }\r\n\r\n    getLeastRecentlyUsedIndex(frequencyOfAccess) {\r\n        const max = Math.max(...frequencyOfAccess);\r\n        return frequencyOfAccess.indexOf(max);\r\n    }\r\n\r\n    getIncrementedFrequency(frequencyOfAccess) {\r\n        return frequencyOfAccess.map(f => ++f);\r\n    }\r\n\r\n    async LRU(numbers, numberOfLines) {\r\n        const numbersAccessed = [];\r\n        const numbersCached = [];\r\n        let frequencyOfAccess = [];\r\n        for (let i = 0; i < numbers.length; i++) {\r\n            const currentNumber = numbers[i];\r\n            await delay(() => { }, this.props.delay);\r\n            await this.setState({ currentNumber: currentNumber });\r\n            if (typeof numbersCached.find(n => n === currentNumber) !== 'undefined') {\r\n                await this.setState({ hit: this.state.hit + 1 });\r\n                const position = numbersCached.indexOf(currentNumber);\r\n                frequencyOfAccess = this.getIncrementedFrequency(frequencyOfAccess);\r\n                frequencyOfAccess[position] = 0;\r\n                continue;\r\n            }\r\n            if (typeof numbersAccessed.find(n => n === currentNumber) !== 'undefined') {\r\n                await this.setState({ capacityMiss: this.state.capacityMiss + 1 });\r\n                const position = this.getLeastRecentlyUsedIndex(frequencyOfAccess);\r\n                numbersCached[position] = currentNumber;\r\n                frequencyOfAccess = this.getIncrementedFrequency(frequencyOfAccess);\r\n                frequencyOfAccess[position] = 0;\r\n                this.addToTable(position, currentNumber);\r\n                continue;\r\n            }\r\n            await this.setState({ compulsoryMiss: this.state.compulsoryMiss + 1 });\r\n            if (numbersCached.length === numberOfLines) {\r\n                const position = this.getLeastRecentlyUsedIndex(frequencyOfAccess);\r\n                numbersCached[position] = currentNumber;\r\n                frequencyOfAccess = this.getIncrementedFrequency(frequencyOfAccess);\r\n                frequencyOfAccess[position] = 0;\r\n                this.addToTable(position, currentNumber);\r\n                numbersAccessed.push(currentNumber);\r\n                continue;\r\n            }\r\n            const position = numbersCached.length;\r\n            numbersCached[position] = currentNumber;\r\n            frequencyOfAccess = this.getIncrementedFrequency(frequencyOfAccess);\r\n            frequencyOfAccess[position] = 0;\r\n            this.addToTable(position, currentNumber);\r\n            numbersAccessed.push(currentNumber);\r\n        }\r\n    }\r\n\r\n    addToTable(line, value) {\r\n        const element = document.getElementById(`lru-${line}`);\r\n        if (element.innerHTML === '-') {\r\n            element.innerHTML = value;\r\n            return;\r\n        }\r\n        element.innerHTML += `, ${value}`;\r\n    }\r\n\r\n\r\n    render() {\r\n        let rows = [];\r\n        for (let i = 0; i < this.props.numberOfLines; i++) {\r\n            rows.push(<tr key={i}><td id={`lru-${i}`}>-</td></tr>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <span>LRU</span>\r\n                {this.state.currentNumber}\r\n                <table>\r\n                    <tbody>\r\n                        {rows}\r\n                    </tbody>\r\n                </table>\r\n                <span>Hit: {this.state.hit}</span>\r\n                <span>Capacity Miss: {this.state.capacityMiss}</span>\r\n                <span>Compulsory Miss: {this.state.compulsoryMiss}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CacheBlockLRU;\r\n","import React from 'react';\r\nimport './Cache-Block.css';\r\nimport { delay } from 'q';\r\n\r\nexport class CacheBlockRNG extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hit: 0,\r\n            capacityMiss: 0,\r\n            compulsoryMiss: 0,\r\n            currentNumber: null\r\n        }\r\n    }\r\n    async componentWillReceiveProps(nextProps) {\r\n        if (nextProps.simulating) {\r\n            await this.FIFO(nextProps.numbers, nextProps.numberOfLines);\r\n        }\r\n    }\r\n\r\n    async FIFO(numbers, numberOfLines) {\r\n        const numbersAccessed = [];\r\n        const numbersCached = [];\r\n        let currentLine = 0;\r\n        for (let i = 0; i < numbers.length; i++) {\r\n            const currentNumber = numbers[i];\r\n            await delay(() => { }, this.props.delay);\r\n            await this.setState({ currentNumber: currentNumber });\r\n            if (typeof numbersCached.find(n => n === currentNumber) !== 'undefined') {\r\n                await this.setState({ hit: this.state.hit + 1 });\r\n                continue;\r\n            }\r\n            if (typeof numbersAccessed.find(n => n === currentNumber) !== 'undefined') {\r\n                await this.setState({ capacityMiss: this.state.capacityMiss + 1 });\r\n                numbersCached[currentLine] = currentNumber;\r\n                this.addToTable(currentLine, currentNumber);\r\n                currentLine = this.getNextLine(numbersCached.length, numberOfLines);\r\n                continue;\r\n            }\r\n            await this.setState({ compulsoryMiss: this.state.compulsoryMiss + 1 });\r\n            numbersCached[currentLine] = currentNumber;\r\n            this.addToTable(currentLine, currentNumber);\r\n            currentLine = this.getNextLine(numbersCached.length, numberOfLines);\r\n            numbersAccessed.push(currentNumber);\r\n        }\r\n    }\r\n\r\n    getNextLine(linesUsed, numberOfLines) {\r\n        console.debug(linesUsed);\r\n        console.debug(numberOfLines);\r\n        return linesUsed < numberOfLines\r\n            ? linesUsed\r\n            : Math.floor(Math.random() * (numberOfLines - 1));\r\n    }\r\n\r\n    addToTable(line, value) {\r\n        const element = document.getElementById(`rng-${line}`);\r\n        if (element.innerHTML === '-') {\r\n            element.innerHTML = value;\r\n            return;\r\n        }\r\n        element.innerHTML += `, ${value}`;\r\n    }\r\n\r\n\r\n    render() {\r\n        let rows = [];\r\n        for (let i = 0; i < this.props.numberOfLines; i++) {\r\n            rows.push(<tr key={i}><td id={`rng-${i}`}>-</td></tr>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <span>RNG</span>\r\n\r\n                {this.state.currentNumber}\r\n                <table>\r\n                    <tbody>\r\n                        {rows}\r\n                    </tbody>\r\n                </table>\r\n                <span>Hit: {this.state.hit}</span>\r\n                <span>Capacity Miss: {this.state.capacityMiss}</span>\r\n                <span>Compulsory Miss: {this.state.compulsoryMiss}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CacheBlockRNG;\r\n","import React from 'react';\nimport CacheBlockFIFO from './cache-block/Cache-Block-FIFO';\nimport CacheBlockLFU from './cache-block/Cache-Block-LFU';\nimport CacheBlockLRU from './cache-block/Cache-Block-LRU';\nimport CacheBlockRNG from './cache-block/Cache-Block-RNG';\nimport './App.css';\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numberOfLines: 4,\n      delay: 250,\n      numbers: [],\n      simulating: false\n    }\n  }\n\n  getNumbers() {\n    const file = document.getElementById(\"file-input\").files[0];\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => this.handleNumbersChange(reader.result.split(',')));\n    reader.readAsText(file);\n  }\n\n  handleSimulationChange = value => {\n    if (this.state.numberOfLines && this.state.numbers.length) {\n      this.setState({ simulating: value });\n      return;\n    }\n  };\n\n  handleNumbersChange = value => this.setState({ numbers: value });\n\n  handleNumberOfLinesChange = e => this.setState({ numberOfLines: e.target.value });\n\n  render() {\n    return (\n      <div className=\"app\">\n        <label>How many lines are in the cache?\n          <input id='lines-input' type=\"number\" min='1' defaultValue='4' onChange={(e) => this.handleNumberOfLinesChange(e)} />\n        </label>\n        <label>Upload the csv here:\n          <input id='file-input' type=\"file\" onChange={() => this.getNumbers()} />\n        </label>\n        \n        <input type='button' onClick={() => this.handleSimulationChange(true)} value='Go' />\n\n        <div className='cache-container'>\n          <CacheBlockFIFO delay={this.state.delay} numberOfLines={this.state.numberOfLines} numbers={this.state.numbers} simulating={this.state.simulating}></CacheBlockFIFO>\n          <CacheBlockLFU delay={this.state.delay} numberOfLines={this.state.numberOfLines} numbers={this.state.numbers} simulating={this.state.simulating}></CacheBlockLFU>\n          <CacheBlockLRU delay={this.state.delay} numberOfLines={this.state.numberOfLines} numbers={this.state.numbers} simulating={this.state.simulating}></CacheBlockLRU>\n          <CacheBlockRNG delay={this.state.delay} numberOfLines={this.state.numberOfLines} numbers={this.state.numbers} simulating={this.state.simulating}></CacheBlockRNG>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}