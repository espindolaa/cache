{"version":3,"sources":["cache/cache-block/Cache-Block-FIFO.js","cache/cache-block/Cache-Block-LFU.js","cache/cache-block/Cache-Block-LRU.js","cache/cache-block/Cache-Block-RNG.js","cache/Cache-Controller.js","main-page/Main-Page.js","serviceWorker.js","index.js"],"names":["CacheBlockFIFO","props","state","hit","capacityMiss","compulsoryMiss","currentNumber","numbersAccessed","numbersCached","currentLine","numberOfLines","nextProps","this","setState","number$","subscribe","n","addToCache","number","includes","registerHit","registerMiss","missType","getMissType","registerCapacityMiss","registerCompulsoryMiss","updateNumbersCached","addToTable","updateNextLine","updateNumbersAccessed","push","line","nextLine","getNextLine","value","element","document","getElementById","innerHTML","rows","i","key","id","React","Component","CacheBlockLFU","frequencyOfAccess","setupFrequencyOfAccess","position","indexOf","incrementFrequencyOfAccess","getLeastFrequentlyUsedIndex","resetFrequencyOfAccess","length","min","Math","CacheBlockLRU","getLeastRecentlyUsedIndex","map","max","f","CacheBlockRNG","linesUsed","floor","random","CacheController","delay","Subject","simulating","loopThroughNumbers","numbers","next","className","MainPage","handleSimulationChange","handleNumbersChange","handleNumberOfLinesChange","e","target","file","files","reader","FileReader","addEventListener","result","split","readAsText","type","defaultValue","onChange","getNumbers","onClick","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16341458.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Cache-Block.css';\r\nimport { delay } from 'q';\r\n\r\nexport class CacheBlockFIFO extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hit: 0,\r\n            capacityMiss: 0,\r\n            compulsoryMiss: 0,\r\n            currentNumber: null,\r\n            numbersAccessed: [],\r\n            numbersCached: [],\r\n            currentLine: 0,\r\n            numberOfLines: 0\r\n        }\r\n    }\r\n    async componentWillReceiveProps(nextProps) {\r\n        await this.setState({ numberOfLines: nextProps.numberOfLines });\r\n        nextProps.number$.subscribe(n => this.addToCache(n));\r\n    }\r\n\r\n    async addToCache(number) {\r\n        this.state.numbersCached.includes(number)\r\n            ? await this.registerHit()\r\n            : await this.registerMiss(number)\r\n    }\r\n\r\n    async registerHit() {\r\n        await this.setState({ hit: this.state.hit + 1 });\r\n    }\r\n\r\n    async registerMiss(number) {\r\n        const missType = this.getMissType(number);\r\n        switch (missType) {\r\n            case 'CAPACITY':\r\n                await this.registerCapacityMiss(number);\r\n                break;\r\n            case 'COMPULSORY':\r\n                await this.registerCompulsoryMiss(number);\r\n                break;\r\n        }\r\n    }\r\n\r\n    getMissType(number) {\r\n        return this.state.numbersAccessed.includes(number)\r\n            ? 'CAPACITY'\r\n            : 'COMPULSORY';\r\n    }\r\n\r\n    async registerCapacityMiss(number) {\r\n        await this.setState({ capacityMiss: this.state.capacityMiss + 1 });\r\n        await this.updateNumbersCached(number, this.state.currentLine);\r\n        this.addToTable(number, this.state.currentLine);\r\n        await this.updateNextLine(this.state.currentLine, this.state.numberOfLines);\r\n    }\r\n\r\n    async registerCompulsoryMiss(number) {\r\n        await this.setState({ compulsoryMiss: this.state.compulsoryMiss + 1 });\r\n        await this.updateNumbersCached(number, this.state.currentLine);\r\n        this.addToTable(number, this.state.currentLine);\r\n        await this.updateNextLine(this.state.currentLine, this.state.numberOfLines);\r\n        await this.updateNumbersAccessed(number);\r\n    }\r\n\r\n    async updateNumbersAccessed(number) {\r\n        const numbersAccessed = this.state.numbersAccessed;\r\n        numbersAccessed.push(number);\r\n        await this.setState({ numbersAccessed: numbersAccessed });\r\n    }\r\n\r\n    async updateNumbersCached(number, line) {\r\n        const numbersCached = this.state.numbersCached;\r\n        numbersCached[line] = number;\r\n        await this.setState({ numbersCached: numbersCached });\r\n    }\r\n\r\n    async updateNextLine(currentLine, numberOfLines) {\r\n        const nextLine = this.getNextLine(currentLine, numberOfLines);\r\n        await this.setState({ currentLine: nextLine });\r\n    }\r\n\r\n    getNextLine(currentLine, numberOfLines) {\r\n        if (currentLine + 1 === numberOfLines) {\r\n            return 0;\r\n        }\r\n        return currentLine + 1;\r\n    }\r\n\r\n    addToTable(value, line) {\r\n        const element = document.getElementById(`fifo-${line}`);\r\n        if (element.innerHTML === '-') {\r\n            element.innerHTML = value;\r\n            return;\r\n        }\r\n        element.innerHTML += `, ${value}`;\r\n    }\r\n\r\n\r\n    render() {\r\n        let rows = [];\r\n        for (let i = 0; i < this.props.numberOfLines; i++) {\r\n            rows.push(<tr key={i}><td id={`fifo-${i}`}>-</td></tr>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <span>FIFO</span>\r\n\r\n                {this.state.currentNumber}\r\n                <table>\r\n                    <tbody>\r\n                        {rows}\r\n                    </tbody>\r\n                </table>\r\n                <span>Hit: {this.state.hit}</span>\r\n                <span>Capacity Miss: {this.state.capacityMiss}</span>\r\n                <span>Compulsory Miss: {this.state.compulsoryMiss}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CacheBlockFIFO;\r\n","import React from 'react';\r\nimport './Cache-Block.css';\r\n\r\nexport class CacheBlockLFU extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hit: 0,\r\n            capacityMiss: 0,\r\n            compulsoryMiss: 0,\r\n            currentNumber: null,\r\n            numbersAccessed: [],\r\n            numbersCached: [],\r\n            numberOfLines: 0,\r\n            frequencyOfAccess: []\r\n        }\r\n    }\r\n    async componentWillReceiveProps(nextProps) {\r\n        if(nextProps.numberOfLines !== this.state.numberOfLines) {\r\n            this.setupFrequencyOfAccess(nextProps.numberOfLines);\r\n            await this.setState({ numberOfLines: nextProps.numberOfLines });\r\n        }\r\n        nextProps.number$.subscribe(n => this.addToCache(n));\r\n    }\r\n    \r\n    async addToCache(number) {\r\n        this.state.numbersCached.includes(number)\r\n            ? await this.registerHit(number)\r\n            : await this.registerMiss(number)\r\n    }\r\n\r\n    async registerHit(number) {\r\n        await this.setState({ hit: this.state.hit + 1 });\r\n        const position = this.state.numbersCached.indexOf(number);\r\n        await this.incrementFrequencyOfAccess(position);\r\n    }\r\n\r\n    async registerMiss(number) {\r\n        const missType = this.getMissType(number);\r\n        switch (missType) {\r\n            case 'CAPACITY':\r\n                await this.registerCapacityMiss(number);\r\n                break;\r\n            case 'COMPULSORY':\r\n                await this.registerCompulsoryMiss(number);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    getMissType(number) {\r\n        return this.state.numbersAccessed.includes(number)\r\n            ? 'CAPACITY'\r\n            : 'COMPULSORY';\r\n    }\r\n\r\n\r\n    async registerCapacityMiss(number) {\r\n        await this.setState({ capacityMiss: this.state.capacityMiss + 1 });\r\n        const position = this.getLeastFrequentlyUsedIndex(this.state.frequencyOfAccess);\r\n        await this.updateNumbersCached(number, position);\r\n        await this.resetFrequencyOfAccess(position);\r\n        this.addToTable(position, number);\r\n    }\r\n\r\n    async registerCompulsoryMiss(number) {\r\n        await this.setState({ compulsoryMiss: this.state.compulsoryMiss + 1 });\r\n        const position = this.getLeastFrequentlyUsedIndex(this.state.frequencyOfAccess);\r\n        await this.updateNumbersCached(number, position);\r\n        await this.resetFrequencyOfAccess(position);\r\n        await this.updateNumbersAccessed(number);\r\n        this.addToTable(position, number);\r\n    }\r\n\r\n    async updateNumbersAccessed(number) {\r\n        const numbersAccessed = this.state.numbersAccessed;\r\n        numbersAccessed.push(number);\r\n        await this.setState({ numbersAccessed: numbersAccessed });\r\n    }\r\n    \r\n    async updateNumbersCached(number, line) {\r\n        const numbersCached = this.state.numbersCached;\r\n        numbersCached[line] = number;\r\n        await this.setState({ numbersCached: numbersCached });\r\n    }\r\n\r\n    async resetFrequencyOfAccess(line) {\r\n        const frequencyOfAccess = this.state.frequencyOfAccess;\r\n        frequencyOfAccess[line] = 0;\r\n        this.setState({ frequencyOfAccess: frequencyOfAccess });\r\n    }\r\n\r\n    async incrementFrequencyOfAccess(line) {\r\n        const frequencyOfAccess = this.state.frequencyOfAccess;\r\n        frequencyOfAccess[line] += 1;\r\n        this.setState({ frequencyOfAccess: frequencyOfAccess });\r\n    }\r\n\r\n    setupFrequencyOfAccess(numberOfLines) {\r\n        const frequencyOfAccess = [];\r\n        for (let i = 0; i < numberOfLines; i++) {\r\n            frequencyOfAccess.push(0);\r\n        }\r\n        this.setState({ frequencyOfAccess: frequencyOfAccess });\r\n    }\r\n\r\n    getLeastFrequentlyUsedIndex(frequencyOfAccess) {\r\n        if (this.state.numbersAccessed.length < this.state.numberOfLines) {\r\n            return this.state.numbersAccessed.length;\r\n        }\r\n        const min = Math.min(...frequencyOfAccess);\r\n        return frequencyOfAccess.indexOf(min);\r\n    }\r\n\r\n    addToTable(line, value) {\r\n        const element = document.getElementById(`lfu-${line}`);\r\n        if (element.innerHTML === '-') {\r\n            element.innerHTML = value;\r\n            return;\r\n        }\r\n        element.innerHTML += `, ${value}`;\r\n    }\r\n\r\n    render() {\r\n        let rows = [];\r\n        for (let i = 0; i < this.props.numberOfLines; i++) {\r\n            rows.push(<tr key={i}><td id={`lfu-${i}`}>-</td></tr>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <span>LFU</span>\r\n                {this.state.currentNumber}\r\n                <table>\r\n                    <tbody>\r\n                        {rows}\r\n                    </tbody>\r\n                </table>\r\n                <span>Hit: {this.state.hit}</span>\r\n                <span>Capacity Miss: {this.state.capacityMiss}</span>\r\n                <span>Compulsory Miss: {this.state.compulsoryMiss}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CacheBlockLFU;\r\n","import React from 'react';\r\nimport './Cache-Block.css';\r\nimport { delay } from 'q';\r\n\r\nexport class CacheBlockLRU extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hit: 0,\r\n            capacityMiss: 0,\r\n            compulsoryMiss: 0,\r\n            currentNumber: null,\r\n            numbersAccessed: [],\r\n            numbersCached: [],\r\n            numberOfLines: 0,\r\n            frequencyOfAccess: []\r\n        }\r\n    }\r\n    async componentWillReceiveProps(nextProps) {\r\n        if(nextProps.numberOfLines !== this.state.numberOfLines) {\r\n            this.setupFrequencyOfAccess(nextProps.numberOfLines);\r\n            await this.setState({ numberOfLines: nextProps.numberOfLines });\r\n        }\r\n        nextProps.number$.subscribe(n => this.addToCache(n));\r\n    }\r\n\r\n    async addToCache(number) {\r\n        this.state.numbersCached.includes(number)\r\n            ? await this.registerHit(number)\r\n            : await this.registerMiss(number)\r\n    }\r\n\r\n    async registerHit(number) {\r\n        await this.setState({ hit: this.state.hit + 1 });\r\n        await this.incrementFrequencyOfAccess();\r\n        const position = this.state.numbersCached.indexOf(number);\r\n        await this.resetFrequencyOfAccess(position);\r\n    }\r\n\r\n    async registerMiss(number) {\r\n        const missType = this.getMissType(number);\r\n        switch (missType) {\r\n            case 'CAPACITY':\r\n                await this.registerCapacityMiss(number);\r\n                break;\r\n            case 'COMPULSORY':\r\n                await this.registerCompulsoryMiss(number);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    getMissType(number) {\r\n        return this.state.numbersAccessed.includes(number)\r\n            ? 'CAPACITY'\r\n            : 'COMPULSORY';\r\n    }\r\n\r\n    async registerCapacityMiss(number) {\r\n        await this.setState({ capacityMiss: this.state.capacityMiss + 1 });\r\n        const position = this.getLeastRecentlyUsedIndex(this.state.frequencyOfAccess);\r\n        await this.updateNumbersCached(number, position);\r\n        await this.incrementFrequencyOfAccess();\r\n        await this.resetFrequencyOfAccess(position);\r\n        this.addToTable(position, number);\r\n    }\r\n\r\n    async registerCompulsoryMiss(number) {\r\n        await this.setState({ compulsoryMiss: this.state.compulsoryMiss + 1 });\r\n        const position = this.getLeastRecentlyUsedIndex(this.state.frequencyOfAccess);\r\n        await this.updateNumbersCached(number, position);\r\n        await this.incrementFrequencyOfAccess();\r\n        await this.resetFrequencyOfAccess(position);\r\n        await this.updateNumbersAccessed(number);\r\n        this.addToTable(position, number);\r\n    }\r\n\r\n    async updateNumbersAccessed(number) {\r\n        const numbersAccessed = this.state.numbersAccessed;\r\n        numbersAccessed.push(number);\r\n        await this.setState({ numbersAccessed: numbersAccessed });\r\n    }\r\n    \r\n    async updateNumbersCached(number, line) {\r\n        const numbersCached = this.state.numbersCached;\r\n        numbersCached[line] = number;\r\n        await this.setState({ numbersCached: numbersCached });\r\n    }\r\n\r\n    async resetFrequencyOfAccess(line) {\r\n        const frequencyOfAccess = this.state.frequencyOfAccess;\r\n        frequencyOfAccess[line] = 0;\r\n        this.setState({ frequencyOfAccess: frequencyOfAccess });\r\n    }\r\n\r\n    async incrementFrequencyOfAccess() {\r\n        const frequencyOfAccess = this.state.frequencyOfAccess.map(n => n + 1);\r\n        this.setState({ frequencyOfAccess: frequencyOfAccess });\r\n    }\r\n\r\n    setupFrequencyOfAccess(numberOfLines) {\r\n        const frequencyOfAccess = [];\r\n        for (let i = 0; i < numberOfLines; i++) {\r\n            frequencyOfAccess.push(0);\r\n        }\r\n        this.setState({ frequencyOfAccess: frequencyOfAccess });\r\n    }\r\n\r\n    getLeastRecentlyUsedIndex(frequencyOfAccess) {\r\n        if (this.state.numbersAccessed.length < this.state.numberOfLines) {\r\n            return this.state.numbersAccessed.length;\r\n        }\r\n        const max = Math.max(...frequencyOfAccess);\r\n        return frequencyOfAccess.indexOf(max);\r\n    }\r\n\r\n    getIncrementedFrequency(frequencyOfAccess) {\r\n        return frequencyOfAccess.map(f => ++f);\r\n    }\r\n\r\n    addToTable(line, value) {\r\n        const element = document.getElementById(`lru-${line}`);\r\n        if (element.innerHTML === '-') {\r\n            element.innerHTML = value;\r\n            return;\r\n        }\r\n        element.innerHTML += `, ${value}`;\r\n    }\r\n\r\n    render() {\r\n        let rows = [];\r\n        for (let i = 0; i < this.props.numberOfLines; i++) {\r\n            rows.push(<tr key={i}><td id={`lru-${i}`}>-</td></tr>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <span>LRU</span>\r\n                {this.state.currentNumber}\r\n                <table>\r\n                    <tbody>\r\n                        {rows}\r\n                    </tbody>\r\n                </table>\r\n                <span>Hit: {this.state.hit}</span>\r\n                <span>Capacity Miss: {this.state.capacityMiss}</span>\r\n                <span>Compulsory Miss: {this.state.compulsoryMiss}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CacheBlockLRU;\r\n","import React from 'react';\r\nimport './Cache-Block.css';\r\n\r\nexport class CacheBlockRNG extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hit: 0,\r\n            capacityMiss: 0,\r\n            compulsoryMiss: 0,\r\n            numbersAccessed: [],\r\n            numbersCached: [],\r\n            numberOfLines: 0\r\n        }\r\n    }\r\n    async componentWillReceiveProps(nextProps) {\r\n        await this.setState({ numberOfLines: nextProps.numberOfLines });\r\n        nextProps.number$.subscribe(n => this.addToCache(n));\r\n    }\r\n    \r\n    async addToCache(number) {\r\n        this.state.numbersCached.includes(number)\r\n            ? await this.registerHit()\r\n            : await this.registerMiss(number)\r\n    }\r\n\r\n    async registerHit() {\r\n        await this.setState({ hit: this.state.hit + 1 });\r\n    }\r\n\r\n    async registerMiss(number) {\r\n        const missType = this.getMissType(number);\r\n        switch (missType) {\r\n            case 'CAPACITY':\r\n                await this.registerCapacityMiss(number);\r\n                break;\r\n            case 'COMPULSORY':\r\n                await this.registerCompulsoryMiss(number);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    getMissType(number) {\r\n        return this.state.numbersAccessed.includes(number)\r\n            ? 'CAPACITY'\r\n            : 'COMPULSORY';\r\n    }\r\n\r\n\r\n    async registerCapacityMiss(number) {\r\n        const position = this.getNextLine(this.state.numbersCached.length, this.state.numberOfLines);\r\n        await this.setState({ capacityMiss: this.state.capacityMiss + 1 });\r\n        await this.updateNumbersCached(number, position);\r\n        this.addToTable(position, number);\r\n    }\r\n\r\n    getNextLine(linesUsed, numberOfLines) {\r\n        return linesUsed < numberOfLines\r\n            ? linesUsed\r\n            : Math.floor(Math.random() * numberOfLines);\r\n    }\r\n\r\n    async registerCompulsoryMiss(number) {\r\n        const position = this.getNextLine(this.state.numbersCached.length, this.state.numberOfLines);\r\n        await this.setState({ compulsoryMiss: this.state.compulsoryMiss + 1 });\r\n        await this.updateNumbersCached(number, position);\r\n        await this.updateNumbersAccessed(number);\r\n        this.addToTable(position, number);\r\n    }\r\n\r\n    async updateNumbersAccessed(number) {\r\n        const numbersAccessed = this.state.numbersAccessed;\r\n        numbersAccessed.push(number);\r\n        await this.setState({ numbersAccessed: numbersAccessed });\r\n    }\r\n    \r\n    async updateNumbersCached(number, line) {\r\n        const numbersCached = this.state.numbersCached;\r\n        numbersCached[line] = number;\r\n        await this.setState({ numbersCached: numbersCached });\r\n    }\r\n\r\n    addToTable(line, value) {\r\n        const element = document.getElementById(`rng-${line}`);\r\n        if (element.innerHTML === '-') {\r\n            element.innerHTML = value;\r\n            return;\r\n        }\r\n        element.innerHTML += `, ${value}`;\r\n    }\r\n\r\n    render() {\r\n        let rows = [];\r\n        for (let i = 0; i < this.props.numberOfLines; i++) {\r\n            rows.push(<tr key={i}><td id={`rng-${i}`}>-</td></tr>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <span>RNG</span>\r\n                <table>\r\n                    <tbody>\r\n                        {rows}\r\n                    </tbody>\r\n                </table>\r\n                <span>Hit: {this.state.hit}</span>\r\n                <span>Capacity Miss: {this.state.capacityMiss}</span>\r\n                <span>Compulsory Miss: {this.state.compulsoryMiss}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CacheBlockRNG;\r\n","import React from 'react';\r\n\r\nimport CacheBlockFIFO from './cache-block/Cache-Block-FIFO';\r\nimport CacheBlockLFU from './cache-block/Cache-Block-LFU';\r\nimport CacheBlockLRU from './cache-block/Cache-Block-LRU';\r\nimport CacheBlockRNG from './cache-block/Cache-Block-RNG';\r\n\r\nimport { delay } from 'q';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport './Cache-Controller.css';\r\n\r\nexport default class CacheController extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            delay: 250\r\n        }\r\n    }\r\n\r\n    async componentWillReceiveProps(nextProps) {\r\n        this.state.number$ = new Subject();\r\n        if (nextProps.simulating) {\r\n            await this.loopThroughNumbers(nextProps.numbers);\r\n        }\r\n    }\r\n\r\n    async loopThroughNumbers(numbers) {\r\n        for(let i = 0; i < numbers.length; i++ ) {\r\n            await delay(() => { }, this.state.delay);\r\n            this.state.number$.next(numbers[i]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='cache-container'>\r\n                <CacheBlockFIFO number$={this.state.number$} numberOfLines={this.props.numberOfLines}></CacheBlockFIFO>\r\n                <CacheBlockLFU number$={this.state.number$} numberOfLines={this.props.numberOfLines}></CacheBlockLFU>\r\n                <CacheBlockLRU number$={this.state.number$} numberOfLines={this.props.numberOfLines}></CacheBlockLRU>\r\n                <CacheBlockRNG number$={this.state.number$} numberOfLines={this.props.numberOfLines}></CacheBlockRNG> */}\r\n            </div>)\r\n    };\r\n}","import React from 'react';\r\nimport CacheController from '../cache/Cache-Controller';\r\nimport './Main-Page.css';\r\n\r\nexport class MainPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numberOfLines: 4,\r\n      delay: 250,\r\n      numbers: [],\r\n      simulating: false\r\n    }\r\n  }\r\n\r\n  getNumbers() {\r\n    const file = document.getElementById(\"file-input\").files[0];\r\n    const reader = new FileReader();\r\n    reader.addEventListener(\"load\", () => this.handleNumbersChange(reader.result.split(',')));\r\n    reader.readAsText(file);\r\n  }\r\n\r\n  handleSimulationChange = value => {\r\n    if (this.state.numberOfLines && this.state.numbers.length) {\r\n      this.setState({ simulating: value });\r\n      return;\r\n    }\r\n  };\r\n\r\n  handleNumbersChange = value => this.setState({ numbers: value });\r\n\r\n  handleNumberOfLinesChange = e => this.setState({ numberOfLines: e.target.value });\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <label>How many lines are in the cache?\r\n          <input id='lines-input' type=\"number\" min='1' defaultValue='4' onChange={(e) => this.handleNumberOfLinesChange(e)} />\r\n        </label>\r\n        <label>Upload the csv here:\r\n          <input id='file-input' type=\"file\" onChange={() => this.getNumbers()} />\r\n        </label>\r\n        \r\n        <input type='button' onClick={() => this.handleSimulationChange(true)} value='Go' />\r\n\r\n        <div className='cache-container'>\r\n          <CacheController simulating={this.state.simulating} numberOfLines={this.state.numberOfLines} numbers={this.state.numbers}></CacheController>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MainPage from './main-page/Main-Page';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MainPage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}